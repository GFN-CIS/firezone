---

- name: Install wireguard and other packages
  ansible.builtin.apt:
    name:
    - wireguard
    - curl
    - jq
    - python-is-python3
    - python3-pip
    state: present

- name: Install docker-compose Python library
  ansible.builtin.pip:
    name: docker-compose
    state: present

- name: Uninstall stack
  block:
  - name: Stop stack
    community.docker.docker_compose:
      project_src: "{{ firezone_dir }}/"
      state: absent
  - name: Remove firezone directory
    ansible.builtin.file:
      path: "{{ firezone_dir }}"
      state: absent
  when: firezone_redeploy


- ansible.builtin.set_fact:
    mgr_ip: "{{ mgmt_subnet | ansible.utils.nthhost(3) }}"

- name: Ensure firezone_dir exists
  ansible.builtin.file:
    path: "{{ firezone_dir }}"
    state: directory

- ansible.builtin.stat:
    path: "{{ firezone_dir }}/.env"
  register: env_file

- name: Write env file
  ansible.builtin.template:
    dest: "{{ firezone_dir }}/.env"
    src: env.j2
  when: (not env_file.stat.exists) or firezone_redeploy

- name: Write compose file
  ansible.builtin.template:
    dest: "{{ firezone_dir }}/docker-compose.yml"
    src: docker-compose.yml.j2

- name: Copy conntrack-log
  ansible.builtin.copy:
    dest: "{{ firezone_dir }}/"
    src: "files/conntrack-log"

- name: Ensure stack is running
  community.docker.docker_compose:
    project_src: "{{ firezone_dir }}/"
    build: yes
    pull: yes
    state: present
    restarted: true
  register: stack_info
  failed_when: False

- ansible.builtin.set_fact: firezone_container={{ stack_info.services.firezone.keys() | first }}

- name: Waiting for stack to up
  community.docker.docker_container_info:
    name: "{{ firezone_container }}"
  register: container_info
  until: container_info.container.State.Health.Status == "healthy"
  retries: 40
  delay: 5

- name: Ensure admin account exists
  community.docker.docker_container_exec:
    container: "{{ firezone_container }}"
    command: "/app/bin/create-or-reset-admin"

- name: Retrieve API token
  community.docker.docker_container_exec:
    container: "{{ firezone_container }}"
    command: bin/create-api-token
  register: token_result

- set_fact: api_token={{ token_result.stdout_lines[0] }}

- name: Ensure configuration is retrievable
  ansible.builtin.uri:
    url: "{{ server_url }}/v0/configuration"
    method: GET
    headers:
      Authorization: Bearer {{ api_token }}
      Content-Type: application/json
  register: config

- name: Write API token to firezone directory
  ansible.builtin.copy:
    content: "{{ api_token }}"
    dest: "{{ firezone_dir }}/api-token"

- block:
    - ansible.builtin.set_fact:
        oidc_configs: []
    - ansible.builtin.set_fact:
        oidc_configs: >
          {{oidc_configs + [
            {
              'name': item.key,
              'discovery_document_uri': item.value.discovery_document_uri| default ('https://accounts.google.com/.well-known/openid-configuration'),
              'client_id': item.value.client_id,
              'client_secret': item.value.client_secret,
              'redirect_uri': item.value.redirect_uri| default (server_url+'/auth/oidc/'+item.key+'/callback'),
              'response_type': item.value.response_type| default ('code'),
              'scope': item.value.scope| default ('openid email profile'),
              'label': item.key,
              'id': item.key,
              'auto_create_users': true
            }
          ]}}
      loop: "{{ fz_oidc | dict2items }}"
    - ansible.builtin.set_fact:
        openid:
          openid_connect_providers: "{{ oidc_configs }}"

    - ansible.builtin.set_fact:
        configuration:
          configuration: "{{ config.json.data | ansible.utils.remove_keys(target=['openid_connect_providers']) | combine(openid) }}"
    - ansible.builtin.set_fact:
        config: "{{ configuration }}"
    - name: "Redirect uris:"
      ansible.builtin.debug:
        msg: "{{ item.redirect_uri }}"
      loop: "{{ oidc_configs }}"
  when: fz_oidc is defined

- ansible.builtin.set_fact:
    configuration: "{{ config }}"
  when: fz_oidc is not defined
- ansible.builtin.set_fact:
    config:
      configuration: "{{ config }}"
  when: fz_oidc is not defined
  
- ansible.builtin.set_fact:
    config_logo:
      configuration: "{{config.configuration|ansible.utils.remove_keys(target=['logo'])| combine({'logo': {'url': server_url + '/images/logo-text.svg','data':None, 'type':None}})}}"

- name: Set OIDC configuration
  ansible.builtin.uri:
    url: "{{ server_url }}/v0/configuration"
    method: PATCH
    headers:
      Authorization: Bearer {{ api_token }}
      Content-Type: application/json
    body_format: json
    body: "{{ config_logo }}"

- name: Restarting stack
  community.docker.docker_compose:
    project_src: "{{ firezone_dir }}/"
    state: present
    restarted: true
  register: stack_info

- name: Waiting for stack to up
  community.docker.docker_container_info:
    name: "{{ firezone_container }}"
  register: container_info
  until: container_info.container.State.Health.Status=="healthy"
  retries: 40
  delay: 5
